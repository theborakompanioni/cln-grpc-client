plugins {
    id 'java'
}

apply from: "${project.rootDir}/proto.gradle"

description = 'cln grpc client package'

dependencies {
    api "io.grpc:grpc-protobuf:${grpcVersion}"
    api "io.grpc:grpc-stub:${grpcVersion}"
    // grpc-api is added in order for downstream projects to consume classes like `StatusRuntimeException`, etc.
    api "io.grpc:grpc-api:${grpcVersion}"

    // See https://github.com/grpc/grpc-java/issues/3556 why this dependency is needed.
    // Docs: https://github.com/grpc/grpc-java/blob/master/SECURITY.md#netty
    api "io.grpc:grpc-netty-shaded:${grpcVersion}"

    compileOnly 'javax.annotation:javax.annotation-api:1.3.2'

    integTestImplementation "io.projectreactor:reactor-core"
    //integTestImplementation "io.github.theborakompanioni:bitcoin-regtest-starter:${bitcoinSpringBootStarterVersion}"
    integTestImplementation "io.github.theborakompanioni:spring-testcontainer-bitcoind-starter:${bitcoinSpringBootStarterVersion}"
    integTestImplementation "io.github.theborakompanioni:spring-testcontainer-cln-starter:${bitcoinSpringBootStarterVersion}"
}

def protoOriginalTarget = layout.projectDirectory.dir("src/main/resources/cln/cln-grpc/proto")
def protoProcessedTarget = layout.projectDirectory.dir("src/main/java/org/tbk/lightning/cln/grpc/client")

def clnProtoFiles = [
        'node.proto',
        'primitives.proto'
]

task prepareClnProtoDirs {
    mustRunAfter clean
    outputs.upToDateWhen { protoOriginalTarget.asFile.exists() && protoProcessedTarget.asFile.exists() }

    doLast {
        mkdir("${protoOriginalTarget.asFile}")
        mkdir("${protoProcessedTarget.asFile}")
    }
}

task cleanClnProtoDirs {
    outputs.upToDateWhen { !protoOriginalTarget.asFile.exists() && !protoProcessedTarget.asFile.exists() }

    doLast {
        delete("${protoOriginalTarget.asFile}")
        delete("${protoProcessedTarget.asFile}")
    }
}

task fetchClnProtoFiles() {
    dependsOn prepareClnProtoDirs

    outputs.upToDateWhen {
        clnProtoFiles
                .collect { protoOriginalTarget.file(it).asFile }
                .collect { it.exists() }
                .every()
    }

    def base = "https://raw.githubusercontent.com/ElementsProject/lightning/${clnVersion}/cln-grpc/proto"

    doLast {
        clnProtoFiles
                .collect { protoOriginalTarget.file(it).asFile }
                .findAll { !it.exists() }
                .each {
                    new URL("${base}/${it.name}").withInputStream { i -> it.withOutputStream { it << i } }
                }
    }
}

task processClnProtoFiles(type: Copy) {
    dependsOn prepareClnProtoDirs, fetchClnProtoFiles, processResources

    from protoOriginalTarget
    into protoProcessedTarget
    filter(line -> line
            .replaceAll("package cln;", """
package cln;
option java_package = "org.tbk.lightning.cln.grpc.client";
option java_multiple_files = true;
            """)
            .replaceAll("import \"primitives.proto\";", "import \"org/tbk/lightning/cln/grpc/client/primitives.proto\";"))
}

generateProto.dependsOn(processClnProtoFiles)
